
;; Function main (main, funcdef_no=17, decl_uid=2608, cgraph_uid=17, symbol_order=17)

main ()
{
  int opc;
  struct word w;
  struct dictionary d;
  int D.2628;
  int opc.1;
  int D.2624;
  int opc.0;
  int opc.1_12;
  int opc.0_13;
  int _20;
  int _28;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  CreateEmpty (&d);
  __builtin_puts (&"Bem-vindo ao dicionário de verbos irregulares!"[0]);
  __builtin_puts (&"(1) - Inserir um verbo Novo"[0]);
  __builtin_puts (&"(2) - Exibir todos os verbos existentes no dicionario"[0]);
  __builtin_puts (&"(3) - Buscar um verbo"[0]);
  __builtin_puts (&"Remover um verbo"[0]);
  scanf ("%d", &opc);
  goto <bb 12>;
;;    succ:       12

;;   basic block 3, loop depth 1
;;    pred:       12
  opc.0_13 = opc;
  switch (opc.0_13) <default: <L7>, case 0: <L6>, case 1: <L1>, case 2: <L2>, case 3: <L5>>
;;    succ:       10
;;                9
;;                4
;;                5
;;                8

;;   basic block 4, loop depth 1
;;    pred:       3
<L1>:
  InsertDicionary (&d, &w);
  printf ("--press enter--");
  getchar ();
  getchar ();
  system ("clear");
  goto <bb 11>;
;;    succ:       11

;;   basic block 5, loop depth 1
;;    pred:       3
<L2>:
  _20 = Show (&d);
  if (_20 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6
;;                7

;;   basic block 6, loop depth 1
;;    pred:       5
  __builtin_puts (&"o dicionário está vazio"[0]);
;;    succ:       7

;;   basic block 7, loop depth 1
;;    pred:       5
;;                6
  printf ("--press enter--");
  getchar ();
  getchar ();
  system ("clear");
  goto <bb 11>;
;;    succ:       11

;;   basic block 8, loop depth 1
;;    pred:       3
<L5>:
  __builtin_puts (&"Mostrar o verbo existente, caso contrario, dizer que nao achou"[0]);
  goto <bb 11>;
;;    succ:       11

;;   basic block 9, loop depth 1
;;    pred:       3
<L6>:
  goto <bb 11>;
;;    succ:       11

;;   basic block 10, loop depth 1
;;    pred:       3
<L7>:
;;    succ:       11

;;   basic block 11, loop depth 1
;;    pred:       4
;;                7
;;                8
;;                9
;;                10
  FreeVerbs (&d);
;;    succ:       12

;;   basic block 12, loop depth 1
;;    pred:       2
;;                11
  opc.1_12 = opc;
  if (opc.1_12 != 0)
    goto <bb 3>;
  else
    goto <bb 13>;
;;    succ:       3
;;                13

;;   basic block 13, loop depth 0
;;    pred:       12
  _28 = 0;
  d ={v} {CLOBBER};
  w ={v} {CLOBBER};
  opc ={v} {CLOBBER};
;;    succ:       14

;;   basic block 14, loop depth 0
;;    pred:       13
<L12>:
  return _28;
;;    succ:       EXIT

}



Partition map 

Partition 12 (opc.1_12 - 12 )
Partition 13 (opc.0_13 - 13 )
Partition 20 (_20 - 20 )
Partition 28 (_28 - 28 )
Partition 32 (_32(D) - 32 )


Partition map 

Partition 0 (_32(D) - 32 )


Conflict graph:

After sorting:
Coalesce List:

Partition map 

Partition 0 (_32(D) - 32 )

After Coalescing:

Partition map 

Partition 0 (opc.1_12 - 12 )
Partition 1 (opc.0_13 - 13 )
Partition 2 (_20 - 20 )
Partition 3 (_28 - 28 )
Partition 4 (_32(D) - 32 )

main ()
{
  int opc;
  struct word w;
  struct dictionary d;
  int D.2628;
  int opc.1;
  int D.2624;
  int opc.0;
  int opc.1_12;
  int opc.0_13;
  int _20;
  int _28;

;;   basic block 2, loop depth 0
;;    pred:       ENTRY
  CreateEmpty (&d);
  __builtin_puts (&"Bem-vindo ao dicionário de verbos irregulares!"[0]);
  __builtin_puts (&"(1) - Inserir um verbo Novo"[0]);
  __builtin_puts (&"(2) - Exibir todos os verbos existentes no dicionario"[0]);
  __builtin_puts (&"(3) - Buscar um verbo"[0]);
  __builtin_puts (&"Remover um verbo"[0]);
  scanf ("%d", &opc);
  goto <bb 12>;
;;    succ:       12

;;   basic block 3, loop depth 1
;;    pred:       12
  opc.0_13 = opc;
  switch (opc.0_13) <default: <L7>, case 0: <L6>, case 1: <L1>, case 2: <L2>, case 3: <L5>>
;;    succ:       10
;;                9
;;                4
;;                5
;;                8

;;   basic block 4, loop depth 1
;;    pred:       3
<L1>:
  InsertDicionary (&d, &w);
  printf ("--press enter--");
  getchar ();
  getchar ();
  system ("clear");
  goto <bb 11>;
;;    succ:       11

;;   basic block 5, loop depth 1
;;    pred:       3
<L2>:
  _20 = Show (&d);
  if (_20 == 0)
    goto <bb 6>;
  else
    goto <bb 7>;
;;    succ:       6
;;                7

;;   basic block 6, loop depth 1
;;    pred:       5
  __builtin_puts (&"o dicionário está vazio"[0]);
;;    succ:       7

;;   basic block 7, loop depth 1
;;    pred:       5
;;                6
  printf ("--press enter--");
  getchar ();
  getchar ();
  system ("clear");
  goto <bb 11>;
;;    succ:       11

;;   basic block 8, loop depth 1
;;    pred:       3
<L5>:
  __builtin_puts (&"Mostrar o verbo existente, caso contrario, dizer que nao achou"[0]);
  goto <bb 11>;
;;    succ:       11

;;   basic block 9, loop depth 1
;;    pred:       3
<L6>:
  goto <bb 11>;
;;    succ:       11

;;   basic block 10, loop depth 1
;;    pred:       3
<L7>:
;;    succ:       11

;;   basic block 11, loop depth 1
;;    pred:       4
;;                7
;;                8
;;                9
;;                10
  FreeVerbs (&d);
;;    succ:       12

;;   basic block 12, loop depth 1
;;    pred:       2
;;                11
  opc.1_12 = opc;
  if (opc.1_12 != 0)
    goto <bb 3>;
  else
    goto <bb 13>;
;;    succ:       3
;;                13

;;   basic block 13, loop depth 0
;;    pred:       12
  _28 = 0;
  d ={v} {CLOBBER};
  w ={v} {CLOBBER};
  opc ={v} {CLOBBER};
;;    succ:       14

;;   basic block 14, loop depth 0
;;    pred:       13
<L12>:
  return _28;
;;    succ:       EXIT

}



;; Generating RTL for gimple basic block 2

;; CreateEmpty (&d);

(insn 6 5 7 (parallel [
            (set (reg:SI 92)
                (plus:SI (reg/f:SI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) main.c:6 -1
     (nil))

(insn 7 6 8 (set (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (reg:SI 92)) main.c:6 -1
     (nil))

(call_insn 8 7 0 (call (mem:QI (symbol_ref:SI ("CreateEmpty") [flags 0x43]  <function_decl 77ec9c00 CreateEmpty>) [0 CreateEmpty S1 A8])
        (const_int 4 [0x4])) main.c:6 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))

;; __builtin_puts (&"Bem-vindo ao dicionário de verbos irregulares!"[0]);

(insn 9 8 10 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC0") [flags 0x2]  <var_decl 068ed840 *LC0>)) main.c:9 -1
     (nil))

(call_insn 10 9 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 77ed4480 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) main.c:9 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))

;; __builtin_puts (&"(1) - Inserir um verbo Novo"[0]);

(insn 11 10 12 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC1") [flags 0x2]  <var_decl 068ed898 *LC1>)) main.c:10 -1
     (nil))

(call_insn 12 11 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 77ed4480 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) main.c:10 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))

;; __builtin_puts (&"(2) - Exibir todos os verbos existentes no dicionario"[0]);

(insn 13 12 14 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC2") [flags 0x2]  <var_decl 068ed8f0 *LC2>)) main.c:11 -1
     (nil))

(call_insn 14 13 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 77ed4480 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) main.c:11 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))

;; __builtin_puts (&"(3) - Buscar um verbo"[0]);

(insn 15 14 16 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC3") [flags 0x2]  <var_decl 068ed948 *LC3>)) main.c:12 -1
     (nil))

(call_insn 16 15 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 77ed4480 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) main.c:12 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))

;; __builtin_puts (&"Remover um verbo"[0]);

(insn 17 16 18 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC4") [flags 0x2]  <var_decl 068ed9a0 *LC4>)) main.c:13 -1
     (nil))

(call_insn 18 17 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 77ed4480 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) main.c:13 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))

;; scanf ("%d", &opc);

(insn 19 18 20 (parallel [
            (set (reg:SI 93)
                (plus:SI (reg/f:SI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) main.c:14 -1
     (nil))

(insn 20 19 21 (set (mem/f:SI (plus:SI (reg/f:SI 84 virtual-outgoing-args)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg:SI 93)) main.c:14 -1
     (nil))

(insn 21 20 22 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC5") [flags 0x2]  <var_decl 068ed9f8 *LC5>)) main.c:14 -1
     (nil))

(call_insn 22 21 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("scanf") [flags 0x43]  <function_decl 77ed4700 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 8 [0x8]))) main.c:14 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 84 virtual-outgoing-args)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))

;; Generating RTL for gimple basic block 3

;; opc.0_13 = opc;

(insn 26 25 0 (set (reg:SI 88 [ opc.0_13 ])
        (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [5 opc+0 S4 A32])) main.c:17 -1
     (nil))
;; Expanding GIMPLE switch as decision tree:
;;               0
;;        1
;;               2
;;                      3

;; switch (opc.0_13) <default: <L7>, case 0: <L6>, case 1: <L1>, case 2: <L2>, case 3: <L5>>

(insn 27 26 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ opc.0_13 ])
            (const_int 1 [0x1]))) main.c:17 -1
     (nil))

(jump_insn 28 27 29 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) main.c:17 -1
     (nil))

(insn 29 28 30 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 88 [ opc.0_13 ])
            (const_int 1 [0x1]))) main.c:17 -1
     (nil))

(jump_insn 30 29 31 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) main.c:17 -1
     (nil))

(insn 31 30 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ opc.0_13 ])
            (const_int 0 [0]))) main.c:17 -1
     (nil))

(jump_insn 32 31 33 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) main.c:17 -1
     (nil))

(jump_insn 33 32 34 (set (pc)
        (label_ref 0)) main.c:17 -1
     (nil))

(barrier 34 33 35)

(code_label 35 34 36 5 "" [0 uses])

(insn 36 35 37 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ opc.0_13 ])
            (const_int 2 [0x2]))) main.c:17 -1
     (nil))

(jump_insn 37 36 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) main.c:17 -1
     (nil))

(insn 38 37 39 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ opc.0_13 ])
            (const_int 3 [0x3]))) main.c:17 -1
     (nil))

(jump_insn 39 38 40 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) main.c:17 -1
     (nil))

(jump_insn 40 39 41 (set (pc)
        (label_ref 0)) main.c:17 -1
     (nil))

(barrier 41 40 0)

;; Generating RTL for gimple basic block 4

;; <L1>:

(code_label 42 41 43 4 "" [0 uses])

(note 43 42 0 NOTE_INSN_BASIC_BLOCK)

;; InsertDicionary (&d, &w);

(insn 44 43 45 (parallel [
            (set (reg:SI 94)
                (plus:SI (reg/f:SI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) main.c:19 -1
     (nil))

(insn 45 44 46 (set (mem/f:SI (plus:SI (reg/f:SI 84 virtual-outgoing-args)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg:SI 94)) main.c:19 -1
     (nil))

(insn 46 45 47 (parallel [
            (set (reg:SI 95)
                (plus:SI (reg/f:SI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) main.c:19 -1
     (nil))

(insn 47 46 48 (set (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (reg:SI 95)) main.c:19 -1
     (nil))

(call_insn 48 47 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("InsertDicionary") [flags 0x43]  <function_decl 77ec9d80 InsertDicionary>) [0 InsertDicionary S1 A8])
            (const_int 8 [0x8]))) main.c:19 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 84 virtual-outgoing-args)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))

;; printf ("--press enter--");

(insn 49 48 50 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC6") [flags 0x2]  <var_decl 068edaa8 *LC6>)) main.c:20 -1
     (nil))

(call_insn 50 49 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x43]  <function_decl 77ed4100 printf>) [0 __builtin_printf S1 A8])
            (const_int 4 [0x4]))) main.c:20 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))

;; getchar ();

(call_insn 51 50 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 77ed9580 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) main.c:21 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

;; getchar ();

(call_insn 52 51 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 77ed9580 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) main.c:22 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

;; system ("clear");

(insn 53 52 54 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC7") [flags 0x2]  <var_decl 068edb00 *LC7>)) main.c:23 -1
     (nil))

(call_insn 54 53 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("system") [flags 0x43]  <function_decl 77eb8300 system>) [0 system S1 A8])
            (const_int 4 [0x4]))) main.c:23 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))

;; Generating RTL for gimple basic block 5

;; <L2>:

(code_label 57 56 58 7 "" [0 uses])

(note 58 57 0 NOTE_INSN_BASIC_BLOCK)

;; _20 = Show (&d);

(insn 59 58 60 (parallel [
            (set (reg:SI 96)
                (plus:SI (reg/f:SI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) main.c:26 -1
     (nil))

(insn 60 59 61 (set (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (reg:SI 96)) main.c:26 -1
     (nil))

(call_insn 61 60 62 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("Show") [flags 0x43]  <function_decl 77ec9e80 Show>) [0 Show S1 A8])
            (const_int 4 [0x4]))) main.c:26 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))

(insn 62 61 0 (set (reg:SI 89 [ _20 ])
        (reg:SI 0 ax)) main.c:26 -1
     (nil))

;; if (_20 == 0)

(insn 63 62 64 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ _20 ])
            (const_int 0 [0]))) main.c:26 -1
     (nil))

(jump_insn 64 63 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 0)
            (pc))) main.c:26 -1
     (nil))

;; Generating RTL for gimple basic block 6

;; __builtin_puts (&"o dicionário está vazio"[0]);

(insn 66 65 67 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC8") [flags 0x2]  <var_decl 068edb58 *LC8>)) main.c:27 -1
     (nil))

(call_insn 67 66 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 77ed4480 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) main.c:27 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))

;; Generating RTL for gimple basic block 7

;; 

(code_label 68 67 69 10 "" [0 uses])

(note 69 68 0 NOTE_INSN_BASIC_BLOCK)

;; printf ("--press enter--");

(insn 70 69 71 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC6") [flags 0x2]  <var_decl 068edaa8 *LC6>)) main.c:28 -1
     (nil))

(call_insn 71 70 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x43]  <function_decl 77ed4100 printf>) [0 __builtin_printf S1 A8])
            (const_int 4 [0x4]))) main.c:28 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))

;; getchar ();

(call_insn 72 71 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 77ed9580 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) main.c:29 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

;; getchar ();

(call_insn 73 72 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 77ed9580 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) main.c:30 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))

;; system ("clear");

(insn 74 73 75 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC7") [flags 0x2]  <var_decl 068edb00 *LC7>)) main.c:31 -1
     (nil))

(call_insn 75 74 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("system") [flags 0x43]  <function_decl 77eb8300 system>) [0 system S1 A8])
            (const_int 4 [0x4]))) main.c:31 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))

;; Generating RTL for gimple basic block 8

;; <L5>:

(code_label 78 77 79 8 "" [0 uses])

(note 79 78 0 NOTE_INSN_BASIC_BLOCK)

;; __builtin_puts (&"Mostrar o verbo existente, caso contrario, dizer que nao achou"[0]);

(insn 80 79 81 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC9") [flags 0x2]  <var_decl 068edbb0 *LC9>)) main.c:34 -1
     (nil))

(call_insn 81 80 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 77ed4480 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) main.c:34 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))

;; Generating RTL for gimple basic block 9

;; <L6>:

(code_label 84 83 85 6 "" [0 uses])

(note 85 84 0 NOTE_INSN_BASIC_BLOCK)

;; Generating RTL for gimple basic block 10

;; <L7>:

(code_label 88 87 89 3 "" [0 uses])

(note 89 88 0 NOTE_INSN_BASIC_BLOCK)

;; Generating RTL for gimple basic block 11

;; 

(code_label 90 89 91 9 "" [0 uses])

(note 91 90 0 NOTE_INSN_BASIC_BLOCK)

;; FreeVerbs (&d);

(insn 92 91 93 (parallel [
            (set (reg:SI 97)
                (plus:SI (reg/f:SI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) main.c:41 -1
     (nil))

(insn 93 92 94 (set (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (reg:SI 97)) main.c:41 -1
     (nil))

(call_insn 94 93 0 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("FreeVerbs") [flags 0x43]  <function_decl 77ec9e00 FreeVerbs>) [0 FreeVerbs S1 A8])
            (const_int 4 [0x4]))) main.c:41 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))

;; Generating RTL for gimple basic block 12

;; 

(code_label 95 94 96 2 "" [0 uses])

(note 96 95 0 NOTE_INSN_BASIC_BLOCK)

;; opc.1_12 = opc;

(insn 97 96 0 (set (reg:SI 87 [ opc.1_12 ])
        (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [5 opc+0 S4 A32])) main.c:16 -1
     (nil))

;; if (opc.1_12 != 0)

(insn 99 97 100 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ opc.1_12 ])
            (const_int 0 [0]))) main.c:16 -1
     (nil))

(jump_insn 100 99 0 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 98)
            (pc))) main.c:16 -1
     (nil))

;; Generating RTL for gimple basic block 13

;; _28 = 0;

(insn 102 101 0 (set (reg:SI 90 [ _28 ])
        (const_int 0 [0])) main.c:44 -1
     (nil))

;; d ={v} {CLOBBER};

(nil)

;; w ={v} {CLOBBER};

(nil)

;; opc ={v} {CLOBBER};

(nil)

;; Generating RTL for gimple basic block 14

;; <L12>:

(code_label 103 102 104 12 "" [0 uses])

(note 104 103 0 NOTE_INSN_BASIC_BLOCK)

;; return _28;

(insn 105 104 106 (set (reg:SI 91 [ <retval> ])
        (reg:SI 90 [ _28 ])) -1
     (nil))

(jump_insn 106 105 107 (set (pc)
        (label_ref 0)) -1
     (nil))

(barrier 107 106 0)
Purged edges from bb 22


try_optimize_cfg iteration 1

Merging block 3 into block 2...
Merged blocks 2 and 3.
Merged 2 and 3 without moving.
Edge 6->16 redirected to 18
Forwarding edge 6->7 to 17 failed.
Forwarding edge 6->7 to 17 failed.
Redirecting jump 33 from 17 to 18.
Forwarding edge 9->10 to 17 failed.
Redirecting jump 40 from 17 to 18.
deleting block 16
deleting block 17
Removing jump 82.
Merging block 21 into block 20...
Merged blocks 20 and 21.
Merged 20 and 21 without moving.
Removing jump 106.
Merging block 22 into block 20...
Merged blocks 20 and 22.
Merged 20 and 22 without moving.


try_optimize_cfg iteration 2

fix_loop_structure: fixing up loops for function


;;
;; Full RTL generated for this function:
;;
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 4, flags: (NEW, REACHABLE, RTL)
;;  pred:       ENTRY (FALLTHRU)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 4 3 2 NOTE_INSN_FUNCTION_BEG)
(call_insn 3 2 6 2 (call (mem:QI (symbol_ref:SI ("__main") [flags 0x43]) [0  S1 A8])
        (const_int 0 [0])) main.c:3 -1
     (expr_list:REG_EH_REGION (const_int -2147483648 [0xffffffff80000000])
        (nil))
    (nil))
(insn 6 3 7 2 (parallel [
            (set (reg:SI 92)
                (plus:SI (reg/f:SI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) main.c:6 -1
     (nil))
(insn 7 6 8 2 (set (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (reg:SI 92)) main.c:6 -1
     (nil))
(call_insn 8 7 9 2 (call (mem:QI (symbol_ref:SI ("CreateEmpty") [flags 0x43]  <function_decl 77ec9c00 CreateEmpty>) [0 CreateEmpty S1 A8])
        (const_int 4 [0x4])) main.c:6 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))
(insn 9 8 10 2 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC0") [flags 0x2]  <var_decl 068ed840 *LC0>)) main.c:9 -1
     (nil))
(call_insn 10 9 11 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 77ed4480 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) main.c:9 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))
(insn 11 10 12 2 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC1") [flags 0x2]  <var_decl 068ed898 *LC1>)) main.c:10 -1
     (nil))
(call_insn 12 11 13 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 77ed4480 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) main.c:10 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))
(insn 13 12 14 2 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC2") [flags 0x2]  <var_decl 068ed8f0 *LC2>)) main.c:11 -1
     (nil))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 77ed4480 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) main.c:11 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))
(insn 15 14 16 2 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC3") [flags 0x2]  <var_decl 068ed948 *LC3>)) main.c:12 -1
     (nil))
(call_insn 16 15 17 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 77ed4480 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) main.c:12 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))
(insn 17 16 18 2 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC4") [flags 0x2]  <var_decl 068ed9a0 *LC4>)) main.c:13 -1
     (nil))
(call_insn 18 17 19 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 77ed4480 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) main.c:13 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))
(insn 19 18 20 2 (parallel [
            (set (reg:SI 93)
                (plus:SI (reg/f:SI 82 virtual-stack-vars)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) main.c:14 -1
     (nil))
(insn 20 19 21 2 (set (mem/f:SI (plus:SI (reg/f:SI 84 virtual-outgoing-args)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg:SI 93)) main.c:14 -1
     (nil))
(insn 21 20 22 2 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC5") [flags 0x2]  <var_decl 068ed9f8 *LC5>)) main.c:14 -1
     (nil))
(call_insn 22 21 23 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("scanf") [flags 0x43]  <function_decl 77ed4700 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 8 [0x8]))) main.c:14 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 84 virtual-outgoing-args)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(jump_insn 23 22 24 2 (set (pc)
        (label_ref 95)) main.c:16 -1
     (nil)
 -> 95)
;;  succ:       19

(barrier 24 23 98)
;; basic block 4, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 2, next block 5, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       19
(code_label 98 24 25 4 11 "" [1 uses])
(note 25 98 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 26 25 27 4 (set (reg:SI 88 [ opc.0_13 ])
        (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [5 opc+0 S4 A32])) main.c:17 -1
     (nil))
(insn 27 26 28 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ opc.0_13 ])
            (const_int 1 [0x1]))) main.c:17 -1
     (nil))
(jump_insn 28 27 112 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) main.c:17 -1
     (nil)
 -> 42)
;;  succ:       11
;;              5 (FALLTHRU)

;; basic block 5, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       4 (FALLTHRU)
(note 112 28 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 29 112 30 5 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 88 [ opc.0_13 ])
            (const_int 1 [0x1]))) main.c:17 -1
     (nil))
(jump_insn 30 29 113 5 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 35)
            (pc))) main.c:17 -1
     (nil)
 -> 35)
;;  succ:       8
;;              6 (FALLTHRU)

;; basic block 6, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5 (FALLTHRU)
(note 113 30 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 31 113 32 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ opc.0_13 ])
            (const_int 0 [0]))) main.c:17 -1
     (nil))
(jump_insn 32 31 114 6 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:SI 90)
            (pc))) main.c:17 533 {*jcc_1}
     (nil)
 -> 90)
;;  succ:       18
;;              7 (FALLTHRU)

;; basic block 7, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 6, next block 8, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       6 (FALLTHRU)
(note 114 32 33 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(jump_insn 33 114 34 7 (set (pc)
        (label_ref:SI 90)) main.c:17 565 {jump}
     (nil)
 -> 90)
;;  succ:       18 [100,0%] 

(barrier 34 33 35)
;; basic block 8, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       5
(code_label 35 34 115 8 5 "" [1 uses])
(note 115 35 36 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 36 115 37 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ opc.0_13 ])
            (const_int 2 [0x2]))) main.c:17 -1
     (nil))
(jump_insn 37 36 116 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) main.c:17 -1
     (nil)
 -> 57)
;;  succ:       12
;;              9 (FALLTHRU)

;; basic block 9, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 8, next block 10, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       8 (FALLTHRU)
(note 116 37 38 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 38 116 39 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 88 [ opc.0_13 ])
            (const_int 3 [0x3]))) main.c:17 -1
     (nil))
(jump_insn 39 38 117 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 78)
            (pc))) main.c:17 -1
     (nil)
 -> 78)
;;  succ:       15
;;              10 (FALLTHRU)

;; basic block 10, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       9 (FALLTHRU)
(note 117 39 40 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(jump_insn 40 117 41 10 (set (pc)
        (label_ref:SI 90)) main.c:17 565 {jump}
     (nil)
 -> 90)
;;  succ:       18 [100,0%] 

(barrier 41 40 42)
;; basic block 11, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 10, next block 12, flags: (NEW, REACHABLE, RTL)
;;  pred:       4
(code_label 42 41 43 11 4 "" [1 uses])
(note 43 42 44 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 11 (parallel [
            (set (reg:SI 94)
                (plus:SI (reg/f:SI 82 virtual-stack-vars)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) main.c:19 -1
     (nil))
(insn 45 44 46 11 (set (mem/f:SI (plus:SI (reg/f:SI 84 virtual-outgoing-args)
                (const_int 4 [0x4])) [0  S4 A32])
        (reg:SI 94)) main.c:19 -1
     (nil))
(insn 46 45 47 11 (parallel [
            (set (reg:SI 95)
                (plus:SI (reg/f:SI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) main.c:19 -1
     (nil))
(insn 47 46 48 11 (set (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (reg:SI 95)) main.c:19 -1
     (nil))
(call_insn 48 47 49 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("InsertDicionary") [flags 0x43]  <function_decl 77ec9d80 InsertDicionary>) [0 InsertDicionary S1 A8])
            (const_int 8 [0x8]))) main.c:19 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (expr_list:SI (use (mem/f:SI (plus:SI (reg/f:SI 84 virtual-outgoing-args)
                        (const_int 4 [0x4])) [0  S4 A32]))
            (nil))))
(insn 49 48 50 11 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC6") [flags 0x2]  <var_decl 068edaa8 *LC6>)) main.c:20 -1
     (nil))
(call_insn 50 49 51 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x43]  <function_decl 77ed4100 printf>) [0 __builtin_printf S1 A8])
            (const_int 4 [0x4]))) main.c:20 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))
(call_insn 51 50 52 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 77ed9580 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) main.c:21 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(call_insn 52 51 53 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 77ed9580 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) main.c:22 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 53 52 54 11 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC7") [flags 0x2]  <var_decl 068edb00 *LC7>)) main.c:23 -1
     (nil))
(call_insn 54 53 55 11 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("system") [flags 0x43]  <function_decl 77eb8300 system>) [0 system S1 A8])
            (const_int 4 [0x4]))) main.c:23 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))
(jump_insn 55 54 56 11 (set (pc)
        (label_ref 90)) main.c:24 -1
     (nil)
 -> 90)
;;  succ:       18

(barrier 56 55 57)
;; basic block 12, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL)
;;  pred:       8
(code_label 57 56 58 12 7 "" [1 uses])
(note 58 57 59 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 12 (parallel [
            (set (reg:SI 96)
                (plus:SI (reg/f:SI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) main.c:26 -1
     (nil))
(insn 60 59 61 12 (set (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (reg:SI 96)) main.c:26 -1
     (nil))
(call_insn 61 60 62 12 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("Show") [flags 0x43]  <function_decl 77ec9e80 Show>) [0 Show S1 A8])
            (const_int 4 [0x4]))) main.c:26 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))
(insn 62 61 63 12 (set (reg:SI 89 [ _20 ])
        (reg:SI 0 ax)) main.c:26 -1
     (nil))
(insn 63 62 64 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 89 [ _20 ])
            (const_int 0 [0]))) main.c:26 -1
     (nil))
(jump_insn 64 63 65 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) main.c:26 -1
     (nil)
 -> 68)
;;  succ:       13 (FALLTHRU)
;;              14

;; basic block 13, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, RTL)
;;  pred:       12 (FALLTHRU)
(note 65 64 66 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 66 65 67 13 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC8") [flags 0x2]  <var_decl 068edb58 *LC8>)) main.c:27 -1
     (nil))
(call_insn 67 66 68 13 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 77ed4480 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) main.c:27 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))
;;  succ:       14 (FALLTHRU)

;; basic block 14, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 13, next block 15, flags: (NEW, REACHABLE, RTL)
;;  pred:       12
;;              13 (FALLTHRU)
(code_label 68 67 69 14 10 "" [1 uses])
(note 69 68 70 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 70 69 71 14 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC6") [flags 0x2]  <var_decl 068edaa8 *LC6>)) main.c:28 -1
     (nil))
(call_insn 71 70 72 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x43]  <function_decl 77ed4100 printf>) [0 __builtin_printf S1 A8])
            (const_int 4 [0x4]))) main.c:28 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))
(call_insn 72 71 73 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 77ed9580 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) main.c:29 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(call_insn 73 72 74 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getchar") [flags 0x43]  <function_decl 77ed9580 getchar>) [0 getchar S1 A8])
            (const_int 0 [0]))) main.c:30 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 74 73 75 14 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC7") [flags 0x2]  <var_decl 068edb00 *LC7>)) main.c:31 -1
     (nil))
(call_insn 75 74 76 14 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("system") [flags 0x43]  <function_decl 77eb8300 system>) [0 system S1 A8])
            (const_int 4 [0x4]))) main.c:31 -1
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))
(jump_insn 76 75 77 14 (set (pc)
        (label_ref 90)) main.c:32 -1
     (nil)
 -> 90)
;;  succ:       18

(barrier 77 76 78)
;; basic block 15, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 14, next block 18, flags: (NEW, REACHABLE, RTL)
;;  pred:       9
(code_label 78 77 79 15 8 "" [1 uses])
(note 79 78 80 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 80 79 81 15 (set (mem:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (symbol_ref/f:SI ("*LC9") [flags 0x2]  <var_decl 068edbb0 *LC9>)) main.c:34 -1
     (nil))
(call_insn 81 80 90 15 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("puts") [flags 0x43]  <function_decl 77ed4480 __builtin_puts>) [0 __builtin_puts S1 A8])
            (const_int 4 [0x4]))) main.c:34 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))
;;  succ:       18 [100,0%]  (FALLTHRU)

;; basic block 18, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 15, next block 19, flags: (NEW, REACHABLE, RTL)
;;  pred:       11
;;              14
;;              15 [100,0%]  (FALLTHRU)
;;              10 [100,0%] 
;;              7 [100,0%] 
;;              6
(code_label 90 81 91 18 9 "" [5 uses])
(note 91 90 92 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 93 18 (parallel [
            (set (reg:SI 97)
                (plus:SI (reg/f:SI 82 virtual-stack-vars)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) main.c:41 -1
     (nil))
(insn 93 92 94 18 (set (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32])
        (reg:SI 97)) main.c:41 -1
     (nil))
(call_insn 94 93 95 18 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("FreeVerbs") [flags 0x43]  <function_decl 77ec9e00 FreeVerbs>) [0 FreeVerbs S1 A8])
            (const_int 4 [0x4]))) main.c:41 -1
     (nil)
    (expr_list:SI (use (mem/f:SI (reg/f:SI 84 virtual-outgoing-args) [0  S4 A32]))
        (nil)))
;;  succ:       19 (FALLTHRU,DFS_BACK)

;; basic block 19, loop depth 1, count 0, freq 0, maybe hot
;;  prev block 18, next block 20, flags: (NEW, REACHABLE, RTL)
;;  pred:       2
;;              18 (FALLTHRU,DFS_BACK)
(code_label 95 94 96 19 2 "" [1 uses])
(note 96 95 97 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 99 19 (set (reg:SI 87 [ opc.1_12 ])
        (mem/c:SI (plus:SI (reg/f:SI 82 virtual-stack-vars)
                (const_int -28 [0xffffffffffffffe4])) [5 opc+0 S4 A32])) main.c:16 -1
     (nil))
(insn 99 97 100 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 87 [ opc.1_12 ])
            (const_int 0 [0]))) main.c:16 -1
     (nil))
(jump_insn 100 99 101 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 98)
            (pc))) main.c:16 -1
     (nil)
 -> 98)
;;  succ:       4
;;              20 (FALLTHRU)

;; basic block 20, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 19, next block 1, flags: (NEW, REACHABLE, RTL)
;;  pred:       19 (FALLTHRU)
(note 101 100 102 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 102 101 105 20 (set (reg:SI 90 [ _28 ])
        (const_int 0 [0])) main.c:44 -1
     (nil))
(insn 105 102 109 20 (set (reg:SI 91 [ <retval> ])
        (reg:SI 90 [ _28 ])) -1
     (nil))
(insn 109 105 110 20 (set (reg/i:SI 0 ax)
        (reg:SI 91 [ <retval> ])) main.c:45 -1
     (nil))
(insn 110 109 0 20 (use (reg/i:SI 0 ax)) main.c:45 -1
     (nil))
;;  succ:       EXIT [100,0%]  (FALLTHRU)

